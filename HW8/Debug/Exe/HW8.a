;/*******************************************************
;This program was created by the
;CodeWizardAVR V3.12 Advanced
;Automatic Program Generator
;© Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project : HW8
;Version : 1.0
;Date    : 4/22/2024
;Author  : Pooria Rahimi
;Company : IUST
;Comments:
;
;
;Chip type               : ATmega32
;Program type            : Application
;AVR Core Clock frequency: 8.000000 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 512
;*******************************************************/
;#include <mega32.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x80
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x70
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x60
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x70
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <alcd.h>
;#include <delay.h>
;#include <stdio.h>
;
;
;
;#define KEYPAD_R1 PORTD.0
;#define KEYPAD_R2 PORTD.1
;#define KEYPAD_R3 PORTD.2
;#define KEYPAD_R4 PORTD.3
;#define KEYPAD_C1 PIND.4
;#define KEYPAD_C2 PIND.5
;#define KEYPAD_C3 PIND.6
;#define KEYPAD_C4 PIND.7
;
;#define KEYPAD_NUM0 0
;#define KEYPAD_NUM1 1
;#define KEYPAD_NUM2 2
;#define KEYPAD_NUM3 3
;#define KEYPAD_NUM4 4
;#define KEYPAD_NUM5 5
;#define KEYPAD_NUM6 6
;#define KEYPAD_NUM7 7
;#define KEYPAD_NUM8 8
;#define KEYPAD_NUM9 9
;#define KEYPAD_DIV  10
;#define KEYPAD_MUL  11
;#define KEYPAD_PLS  12
;#define KEYPAD_MNS  13
;#define KEYPAD_EQU  14
;#define KEYPAD_ON   15
;
;typedef enum State {StartN1, GetN1, StartN2, GetN2, Error, Result} State;
;unsigned char numbers[10] = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9'};

	.DSEG
;unsigned char operators[4] = {'/', '*', '+', '-'};
;int number1;
;int number2;
;unsigned char operator;
;char str_result[10];
;
;int is_operator(unsigned char c);
;unsigned char keypad_scan();
;State state_machine(char current_char, State current_state);
;int is_number(char c);
;int calculate(int number1, int number2, unsigned char operator);
;static char *itoa_simple_helper(char *dest, int i);
;char *itoa_simple(char *dest, int i);
;int is_zero_division(int number2, unsigned char operator);
;
;
;
;void main(void)
; 0000 004C {

	.CSEG
;PCODE: $0000000D VOL: 0
; 0000 004D unsigned char key_res;
; 0000 004E unsigned char current_char;
; 0000 004F State current_state = StartN1;
; 0000 0050 
; 0000 0051 DDRC=0xFF;
;	key_res -> R17
;	current_char -> R16
;	current_state -> R19
;PCODE: $0000000E VOL: 0
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
; 0000 0052 DDRD=0x0F;
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
; 0000 0053 PORTC=0x00;
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
; 0000 0054 
; 0000 0055 lcd_init(16);
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
; 0000 0056 lcd_clear();
;PCODE: $00000018 VOL: 0
; 0000 0057 lcd_gotoxy(1,0);
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
; 0000 0058 lcd_puts("KEYPAD AND LCD");
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
; 0000 0059 lcd_gotoxy(5,1);
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
; 0000 005A lcd_puts("PROJECT");
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
; 0000 005B delay_ms(2000);
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
; 0000 005C lcd_clear();
;PCODE: $00000029 VOL: 0
; 0000 005D 
; 0000 005E while (1)
;PCODE: $0000002A VOL: 0
; 0000 005F       {
; 0000 0060       key_res = keypad_scan();
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
; 0000 0061       if(key_res != 255)
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
; 0000 0062       {
; 0000 0063       while(keypad_scan() != 255);
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
; 0000 0064       delay_ms(20);
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
; 0000 0065       if (key_res == KEYPAD_DIV)
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
; 0000 0066           current_char = '/';
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
; 0000 0067       else if (key_res == KEYPAD_MUL)
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
; 0000 0068           current_char = '*';
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
; 0000 0069       else if (key_res == KEYPAD_MNS)
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
; 0000 006A           current_char = '-';
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
; 0000 006B       else if (key_res == KEYPAD_PLS)
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
; 0000 006C           current_char = '+';
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
; 0000 006D       else if (key_res == KEYPAD_EQU)
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
; 0000 006E           current_char = '=';
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
; 0000 006F       else if (key_res == KEYPAD_ON)
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
; 0000 0070       {
; 0000 0071           current_char = 'c';
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
; 0000 0072       }
; 0000 0073       else
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
; 0000 0074           current_char = key_res + 48;
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
; 0000 0075 
; 0000 0076       //lcd_putchar(current_char);
; 0000 0077       current_state = state_machine(current_char, current_state);
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
; 0000 0078       }
; 0000 0079       }
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
; 0000 007A }
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0

	.DSEG
_0x5:
	.BYTE 0x17
;
;
;State state_machine(unsigned char current_char, State current_state)
; 0000 007E {

	.CSEG
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
; 0000 007F     int result;
; 0000 0080 
; 0000 0081     switch(current_state)
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;	current_char -> Y+3
;	current_state -> Y+2
;	result -> R16,R17
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
; 0000 0082     {
; 0000 0083         case StartN1:
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
; 0000 0084             if (is_number(current_char))
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
; 0000 0085             {
; 0000 0086                 lcd_putchar(current_char);
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
; 0000 0087                 current_state = GetN1;
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
; 0000 0088                 number1 = (int)(current_char - 48);
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
; 0000 0089             }
; 0000 008A             else if (current_char == 'c')
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
; 0000 008B             {
; 0000 008C                 current_state = StartN1;
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
; 0000 008D                 lcd_clear();
;PCODE: $00000092 VOL: 0
; 0000 008E                 lcd_gotoxy(0,0);
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
; 0000 008F             }
; 0000 0090             else
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
; 0000 0091             {
; 0000 0092                 lcd_puts("Error");
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
; 0000 0093                 current_state = Error;
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
; 0000 0094             }
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
; 0000 0095             break;
;PCODE: $000000A0 VOL: 0
; 0000 0096 
; 0000 0097         case GetN1:
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
; 0000 0098             if (is_number(current_char))
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
; 0000 0099             {
; 0000 009A                 lcd_putchar(current_char);
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
; 0000 009B                 current_state = GetN1;
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
; 0000 009C                 number1 = number1 * 10;
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
; 0000 009D                 number1 = number1 + (int)(current_char - 48);
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
; 0000 009E             }
; 0000 009F             else if (current_char == 'c')
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
; 0000 00A0             {
; 0000 00A1                 current_state = StartN1;
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
; 0000 00A2                 lcd_clear();
;PCODE: $000000BC VOL: 0
; 0000 00A3                 lcd_gotoxy(0,0);
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
; 0000 00A4             }
; 0000 00A5             else if (is_operator(current_char))
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
; 0000 00A6             {
; 0000 00A7                 lcd_putchar(current_char);
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
; 0000 00A8                 current_state = StartN2;
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
; 0000 00A9                 operator = current_char;
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
; 0000 00AA             }
; 0000 00AB             else
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
; 0000 00AC             {
; 0000 00AD                 lcd_clear();
;PCODE: $000000CF VOL: 0
; 0000 00AE                 lcd_gotoxy(0,0);
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
; 0000 00AF                 lcd_puts("Error");
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
; 0000 00B0                 current_state = Error;
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
; 0000 00B1             }
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
; 0000 00B2             break;
;PCODE: $000000DC VOL: 0
; 0000 00B3         case StartN2:
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
; 0000 00B4             if (is_number(current_char))
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
; 0000 00B5             {
; 0000 00B6                 lcd_putchar(current_char);
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
; 0000 00B7                 current_state = GetN2;
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
; 0000 00B8                 number2 = (int)(current_char - 48);
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
; 0000 00B9             }
; 0000 00BA             else if (current_char == 'c')
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
; 0000 00BB             {
; 0000 00BC                 current_state = StartN1;
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
; 0000 00BD                 lcd_clear();
;PCODE: $000000F3 VOL: 0
; 0000 00BE                 lcd_gotoxy(0,0);
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
; 0000 00BF             }
; 0000 00C0             else if (current_char == '=')
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
; 0000 00C1             {
; 0000 00C2                 lcd_putchar(current_char);
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
; 0000 00C3                 if (is_zero_division(number2, operator))
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
; 0000 00C4                 {
; 0000 00C5                     lcd_clear();
;PCODE: $00000104 VOL: 0
; 0000 00C6                     lcd_gotoxy(0,0);
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
; 0000 00C7                     lcd_puts("Zero Division");
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
; 0000 00C8                     current_state = Error;
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
; 0000 00C9                 }
; 0000 00CA                 else
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
; 0000 00CB                 {
; 0000 00CC                     result = calculate(number1, number2, operator);
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
; 0000 00CD                     lcd_puts(itoa_simple(str_result, result));
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
; 0000 00CE                     current_state = Result;
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
; 0000 00CF                 }
;PCODE: $0000011D VOL: 0
; 0000 00D0             }
; 0000 00D1             else
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
; 0000 00D2             {
; 0000 00D3                 lcd_clear();
;PCODE: $00000120 VOL: 0
; 0000 00D4                 lcd_gotoxy(0,0);
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
; 0000 00D5                 lcd_puts("Error");
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 0
; 0000 00D6                 current_state = Error;
;PCODE: $00000128 VOL: 0
;PCODE: $00000129 VOL: 0
; 0000 00D7             }
;PCODE: $0000012A VOL: 0
;PCODE: $0000012B VOL: 0
;PCODE: $0000012C VOL: 0
; 0000 00D8             break;
;PCODE: $0000012D VOL: 0
; 0000 00D9         case GetN2:
;PCODE: $0000012E VOL: 0
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0
; 0000 00DA             if (is_number(current_char))
;PCODE: $00000131 VOL: 0
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
; 0000 00DB             {
; 0000 00DC                 lcd_putchar(current_char);
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
; 0000 00DD                 current_state = GetN2;
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0
; 0000 00DE                 number2 = number2 * 10;
;PCODE: $00000139 VOL: 0
;PCODE: $0000013A VOL: 0
;PCODE: $0000013B VOL: 0
;PCODE: $0000013C VOL: 0
; 0000 00DF                 number2 = number2 + (int)(current_char - 48);
;PCODE: $0000013D VOL: 0
;PCODE: $0000013E VOL: 0
;PCODE: $0000013F VOL: 0
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0
; 0000 00E0             }
; 0000 00E1             else if (current_char == 'c')
;PCODE: $00000142 VOL: 0
;PCODE: $00000143 VOL: 0
;PCODE: $00000144 VOL: 0
;PCODE: $00000145 VOL: 0
;PCODE: $00000146 VOL: 0
; 0000 00E2             {
; 0000 00E3                 current_state = StartN1;
;PCODE: $00000147 VOL: 0
;PCODE: $00000148 VOL: 0
; 0000 00E4                 lcd_clear();
;PCODE: $00000149 VOL: 0
; 0000 00E5                 lcd_gotoxy(0,0);
;PCODE: $0000014A VOL: 0
;PCODE: $0000014B VOL: 0
;PCODE: $0000014C VOL: 0
;PCODE: $0000014D VOL: 0
; 0000 00E6             }
; 0000 00E7             else if (current_char == '=')
;PCODE: $0000014E VOL: 0
;PCODE: $0000014F VOL: 0
;PCODE: $00000150 VOL: 0
;PCODE: $00000151 VOL: 0
;PCODE: $00000152 VOL: 0
; 0000 00E8             {
; 0000 00E9                 lcd_putchar(current_char);
;PCODE: $00000153 VOL: 0
;PCODE: $00000154 VOL: 0
; 0000 00EA                 if (is_zero_division(number2, operator))
;PCODE: $00000155 VOL: 0
;PCODE: $00000156 VOL: 0
;PCODE: $00000157 VOL: 0
;PCODE: $00000158 VOL: 0
;PCODE: $00000159 VOL: 0
; 0000 00EB                 {
; 0000 00EC                     lcd_clear();
;PCODE: $0000015A VOL: 0
; 0000 00ED                     lcd_gotoxy(0,0);
;PCODE: $0000015B VOL: 0
;PCODE: $0000015C VOL: 0
;PCODE: $0000015D VOL: 0
;PCODE: $0000015E VOL: 0
; 0000 00EE                     lcd_puts("Zero Division");
;PCODE: $0000015F VOL: 0
;PCODE: $00000160 VOL: 0
;PCODE: $00000161 VOL: 0
; 0000 00EF                     current_state = Error;
;PCODE: $00000162 VOL: 0
;PCODE: $00000163 VOL: 0
; 0000 00F0                 }
; 0000 00F1                 else
;PCODE: $00000164 VOL: 0
;PCODE: $00000165 VOL: 0
; 0000 00F2                 {
; 0000 00F3                     result = calculate(number1, number2, operator);
;PCODE: $00000166 VOL: 0
;PCODE: $00000167 VOL: 0
;PCODE: $00000168 VOL: 0
;PCODE: $00000169 VOL: 0
;PCODE: $0000016A VOL: 0
; 0000 00F4                     lcd_puts(itoa_simple(str_result, result));
;PCODE: $0000016B VOL: 0
;PCODE: $0000016C VOL: 0
;PCODE: $0000016D VOL: 0
;PCODE: $0000016E VOL: 0
;PCODE: $0000016F VOL: 0
;PCODE: $00000170 VOL: 0
; 0000 00F5                     current_state = Result;
;PCODE: $00000171 VOL: 0
;PCODE: $00000172 VOL: 0
; 0000 00F6                 }
;PCODE: $00000173 VOL: 0
; 0000 00F7             }
; 0000 00F8             else
;PCODE: $00000174 VOL: 0
;PCODE: $00000175 VOL: 0
; 0000 00F9             {
; 0000 00FA                 lcd_clear();
;PCODE: $00000176 VOL: 0
; 0000 00FB                 lcd_gotoxy(0,0);
;PCODE: $00000177 VOL: 0
;PCODE: $00000178 VOL: 0
;PCODE: $00000179 VOL: 0
;PCODE: $0000017A VOL: 0
; 0000 00FC                 lcd_puts("Error");
;PCODE: $0000017B VOL: 0
;PCODE: $0000017C VOL: 0
;PCODE: $0000017D VOL: 0
; 0000 00FD                 current_state = Error;
;PCODE: $0000017E VOL: 0
;PCODE: $0000017F VOL: 0
; 0000 00FE             }
;PCODE: $00000180 VOL: 0
;PCODE: $00000181 VOL: 0
;PCODE: $00000182 VOL: 0
; 0000 00FF             break;
;PCODE: $00000183 VOL: 0
; 0000 0100 
; 0000 0101         case Error:
;PCODE: $00000184 VOL: 0
;PCODE: $00000185 VOL: 0
;PCODE: $00000186 VOL: 0
; 0000 0102             if (current_char == 'c')
;PCODE: $00000187 VOL: 0
;PCODE: $00000188 VOL: 0
;PCODE: $00000189 VOL: 0
; 0000 0103             {
; 0000 0104                 current_state = StartN1;
;PCODE: $0000018A VOL: 0
;PCODE: $0000018B VOL: 0
; 0000 0105                 lcd_clear();
;PCODE: $0000018C VOL: 0
; 0000 0106                 lcd_gotoxy(0,0);
;PCODE: $0000018D VOL: 0
;PCODE: $0000018E VOL: 0
;PCODE: $0000018F VOL: 0
;PCODE: $00000190 VOL: 0
; 0000 0107             }
; 0000 0108             break;
;PCODE: $00000191 VOL: 0
;PCODE: $00000192 VOL: 0
; 0000 0109 
; 0000 010A         case Result:
;PCODE: $00000193 VOL: 0
;PCODE: $00000194 VOL: 0
;PCODE: $00000195 VOL: 0
; 0000 010B             if (current_char == 'c')
;PCODE: $00000196 VOL: 0
;PCODE: $00000197 VOL: 0
;PCODE: $00000198 VOL: 0
; 0000 010C             {
; 0000 010D                 current_state = StartN1;
;PCODE: $00000199 VOL: 0
;PCODE: $0000019A VOL: 0
; 0000 010E                 lcd_clear();
;PCODE: $0000019B VOL: 0
; 0000 010F                 lcd_gotoxy(0,0);
;PCODE: $0000019C VOL: 0
;PCODE: $0000019D VOL: 0
;PCODE: $0000019E VOL: 0
;PCODE: $0000019F VOL: 0
; 0000 0110             }
; 0000 0111             else
;PCODE: $000001A0 VOL: 0
;PCODE: $000001A1 VOL: 0
; 0000 0112             {
; 0000 0113                 lcd_clear();
;PCODE: $000001A2 VOL: 0
; 0000 0114                 lcd_gotoxy(0,0);
;PCODE: $000001A3 VOL: 0
;PCODE: $000001A4 VOL: 0
;PCODE: $000001A5 VOL: 0
;PCODE: $000001A6 VOL: 0
; 0000 0115                 lcd_puts("Error");
;PCODE: $000001A7 VOL: 0
;PCODE: $000001A8 VOL: 0
;PCODE: $000001A9 VOL: 0
; 0000 0116                 current_state = Error;
;PCODE: $000001AA VOL: 0
;PCODE: $000001AB VOL: 0
; 0000 0117             }
;PCODE: $000001AC VOL: 0
; 0000 0118             break;
;PCODE: $000001AD VOL: 0
; 0000 0119     }
;PCODE: $000001AE VOL: 0
; 0000 011A     return current_state;
;PCODE: $000001AF VOL: 0
;PCODE: $000001B0 VOL: 0
;PCODE: $000001B1 VOL: 0
;PCODE: $000001B2 VOL: 0
;PCODE: $000001B3 VOL: 0
;PCODE: $000001B4 VOL: 0
;PCODE: $000001B5 VOL: 0
; 0000 011B }
;PCODE: $000001B6 VOL: 0

	.DSEG
_0x22:
	.BYTE 0x3A
;
;int is_zero_division(int number2, unsigned char operator)
; 0000 011E {

	.CSEG
;PCODE: $000001B7 VOL: 0
;PCODE: $000001B8 VOL: 0
; 0000 011F     if (number2 == 0 & operator == '/')
;PCODE: $000001B9 VOL: 0
;	number2 -> Y+1
;	operator -> Y+0
;PCODE: $000001BA VOL: 0
;PCODE: $000001BB VOL: 0
;PCODE: $000001BC VOL: 0
;PCODE: $000001BD VOL: 0
;PCODE: $000001BE VOL: 0
;PCODE: $000001BF VOL: 0
;PCODE: $000001C0 VOL: 0
;PCODE: $000001C1 VOL: 0
;PCODE: $000001C2 VOL: 0
; 0000 0120         return 1;
;PCODE: $000001C3 VOL: 0
;PCODE: $000001C4 VOL: 0
;PCODE: $000001C5 VOL: 0
; 0000 0121     else
;PCODE: $000001C6 VOL: 0
; 0000 0122         return 0;
;PCODE: $000001C7 VOL: 0
;PCODE: $000001C8 VOL: 0
;PCODE: $000001C9 VOL: 0
; 0000 0123 }
;PCODE: $000001CA VOL: 0
;PCODE: $000001CB VOL: 0
;PCODE: $000001CC VOL: 0
;PCODE: $000001CD VOL: 0
;
;int is_number(unsigned char c)
; 0000 0126 {
;PCODE: $000001CE VOL: 0
;PCODE: $000001CF VOL: 0
; 0000 0127     int i;
; 0000 0128     for (i = 0;i<10;i++)
;PCODE: $000001D0 VOL: 0
;PCODE: $000001D1 VOL: 0
;PCODE: $000001D2 VOL: 0
;	c -> Y+2
;	i -> R16,R17
;PCODE: $000001D3 VOL: 0
;PCODE: $000001D4 VOL: 0
;PCODE: $000001D5 VOL: 0
;PCODE: $000001D6 VOL: 0
;PCODE: $000001D7 VOL: 0
;PCODE: $000001D8 VOL: 0
;PCODE: $000001D9 VOL: 0
;PCODE: $000001DA VOL: 0
;PCODE: $000001DB VOL: 0
; 0000 0129     {
; 0000 012A         if(c == numbers[i])
;PCODE: $000001DC VOL: 0
;PCODE: $000001DD VOL: 0
;PCODE: $000001DE VOL: 0
;PCODE: $000001DF VOL: 0
;PCODE: $000001E0 VOL: 0
;PCODE: $000001E1 VOL: 0
; 0000 012B             return 1;
;PCODE: $000001E2 VOL: 0
;PCODE: $000001E3 VOL: 0
;PCODE: $000001E4 VOL: 0
;PCODE: $000001E5 VOL: 0
;PCODE: $000001E6 VOL: 0
;PCODE: $000001E7 VOL: 0
;PCODE: $000001E8 VOL: 0
; 0000 012C     }
;PCODE: $000001E9 VOL: 0
;PCODE: $000001EA VOL: 0
;PCODE: $000001EB VOL: 0
;PCODE: $000001EC VOL: 0
;PCODE: $000001ED VOL: 0
;PCODE: $000001EE VOL: 0
; 0000 012D     return 0;
;PCODE: $000001EF VOL: 0
;PCODE: $000001F0 VOL: 0
;PCODE: $000001F1 VOL: 0
;PCODE: $000001F2 VOL: 0
;PCODE: $000001F3 VOL: 0
;PCODE: $000001F4 VOL: 0
;PCODE: $000001F5 VOL: 0
; 0000 012E }
;PCODE: $000001F6 VOL: 0
;
;int is_operator(unsigned char c)
; 0000 0131 {
;PCODE: $000001F7 VOL: 0
;PCODE: $000001F8 VOL: 0
; 0000 0132     int i;
; 0000 0133     for (i = 0;i<10;i++)
;PCODE: $000001F9 VOL: 0
;PCODE: $000001FA VOL: 0
;PCODE: $000001FB VOL: 0
;	c -> Y+2
;	i -> R16,R17
;PCODE: $000001FC VOL: 0
;PCODE: $000001FD VOL: 0
;PCODE: $000001FE VOL: 0
;PCODE: $000001FF VOL: 0
;PCODE: $00000200 VOL: 0
;PCODE: $00000201 VOL: 0
;PCODE: $00000202 VOL: 0
;PCODE: $00000203 VOL: 0
;PCODE: $00000204 VOL: 0
; 0000 0134     {
; 0000 0135         if(c == operators[i])
;PCODE: $00000205 VOL: 0
;PCODE: $00000206 VOL: 0
;PCODE: $00000207 VOL: 0
;PCODE: $00000208 VOL: 0
;PCODE: $00000209 VOL: 0
;PCODE: $0000020A VOL: 0
; 0000 0136             return 1;
;PCODE: $0000020B VOL: 0
;PCODE: $0000020C VOL: 0
;PCODE: $0000020D VOL: 0
;PCODE: $0000020E VOL: 0
;PCODE: $0000020F VOL: 0
;PCODE: $00000210 VOL: 0
;PCODE: $00000211 VOL: 0
; 0000 0137     }
;PCODE: $00000212 VOL: 0
;PCODE: $00000213 VOL: 0
;PCODE: $00000214 VOL: 0
;PCODE: $00000215 VOL: 0
;PCODE: $00000216 VOL: 0
;PCODE: $00000217 VOL: 0
; 0000 0138     return 0;
;PCODE: $00000218 VOL: 0
;PCODE: $00000219 VOL: 0
;PCODE: $0000021A VOL: 0
;PCODE: $0000021B VOL: 0
;PCODE: $0000021C VOL: 0
;PCODE: $0000021D VOL: 0
;PCODE: $0000021E VOL: 0
; 0000 0139 }
;PCODE: $0000021F VOL: 0
;
;int calculate(int number1, int number2, unsigned char operator)
; 0000 013C {
;PCODE: $00000220 VOL: 0
;PCODE: $00000221 VOL: 0
; 0000 013D     switch (operator)
;PCODE: $00000222 VOL: 0
;	number1 -> Y+3
;	number2 -> Y+1
;	operator -> Y+0
;PCODE: $00000223 VOL: 0
;PCODE: $00000224 VOL: 0
; 0000 013E            {
; 0000 013F            case '+':
;PCODE: $00000225 VOL: 0
;PCODE: $00000226 VOL: 0
; 0000 0140                 return number1 + number2;
;PCODE: $00000227 VOL: 0
;PCODE: $00000228 VOL: 0
;PCODE: $00000229 VOL: 0
;PCODE: $0000022A VOL: 0
;PCODE: $0000022B VOL: 0
; 0000 0141            break;
;PCODE: $0000022C VOL: 0
; 0000 0142 
; 0000 0143            case '-':
;PCODE: $0000022D VOL: 0
;PCODE: $0000022E VOL: 0
;PCODE: $0000022F VOL: 0
; 0000 0144                 return number1 - number2;
;PCODE: $00000230 VOL: 0
;PCODE: $00000231 VOL: 0
;PCODE: $00000232 VOL: 0
;PCODE: $00000233 VOL: 0
;PCODE: $00000234 VOL: 0
; 0000 0145            break;
;PCODE: $00000235 VOL: 0
; 0000 0146 
; 0000 0147            case '*':
;PCODE: $00000236 VOL: 0
;PCODE: $00000237 VOL: 0
;PCODE: $00000238 VOL: 0
; 0000 0148                 return number1 * number2;
;PCODE: $00000239 VOL: 0
;PCODE: $0000023A VOL: 0
;PCODE: $0000023B VOL: 0
;PCODE: $0000023C VOL: 0
;PCODE: $0000023D VOL: 0
; 0000 0149            break;
;PCODE: $0000023E VOL: 0
; 0000 014A 
; 0000 014B            case '/':
;PCODE: $0000023F VOL: 0
;PCODE: $00000240 VOL: 0
;PCODE: $00000241 VOL: 0
; 0000 014C                 return number1 / number2;
;PCODE: $00000242 VOL: 0
;PCODE: $00000243 VOL: 0
;PCODE: $00000244 VOL: 0
;PCODE: $00000245 VOL: 0
;PCODE: $00000246 VOL: 0
; 0000 014D            break;
;PCODE: $00000247 VOL: 0
; 0000 014E            }
;PCODE: $00000248 VOL: 0
; 0000 014F }
;PCODE: $00000249 VOL: 0
;PCODE: $0000024A VOL: 0
;PCODE: $0000024B VOL: 0
;
;static char *itoa_simple_helper(char *dest, int i) {
; 0000 0151 static char *itoa_simple_helper(char *dest, int i) {
;PCODE: $0000024C VOL: 0
;PCODE: $0000024D VOL: 0
; 0000 0152   if (i <= -10) {
;PCODE: $0000024E VOL: 0
;	*dest -> Y+2
;	i -> Y+0
;PCODE: $0000024F VOL: 0
;PCODE: $00000250 VOL: 0
;PCODE: $00000251 VOL: 0
;PCODE: $00000252 VOL: 0
; 0000 0153     dest = itoa_simple_helper(dest, i/10);
;PCODE: $00000253 VOL: 0
;PCODE: $00000254 VOL: 0
;PCODE: $00000255 VOL: 0
;PCODE: $00000256 VOL: 0
;PCODE: $00000257 VOL: 0
;PCODE: $00000258 VOL: 0
;PCODE: $00000259 VOL: 0
;PCODE: $0000025A VOL: 0
; 0000 0154   }
; 0000 0155   *dest++ = '0' - i%10;
;PCODE: $0000025B VOL: 0
;PCODE: $0000025C VOL: 0
;PCODE: $0000025D VOL: 0
;PCODE: $0000025E VOL: 0
;PCODE: $0000025F VOL: 0
;PCODE: $00000260 VOL: 0
;PCODE: $00000261 VOL: 0
;PCODE: $00000262 VOL: 0
;PCODE: $00000263 VOL: 0
;PCODE: $00000264 VOL: 0
;PCODE: $00000265 VOL: 0
;PCODE: $00000266 VOL: 0
;PCODE: $00000267 VOL: 0
;PCODE: $00000268 VOL: 0
; 0000 0156   return dest;
;PCODE: $00000269 VOL: 0
;PCODE: $0000026A VOL: 0
;PCODE: $0000026B VOL: 0
; 0000 0157 }
;PCODE: $0000026C VOL: 0
;
;char *itoa_simple(char *dest, int i) {
; 0000 0159 char *itoa_simple(char *dest, int i) {
;PCODE: $0000026D VOL: 0
;PCODE: $0000026E VOL: 0
; 0000 015A   char *s = dest;
; 0000 015B   if (i < 0) {
;PCODE: $0000026F VOL: 0
;PCODE: $00000270 VOL: 0
;PCODE: $00000271 VOL: 0
;	*dest -> Y+4
;	i -> Y+2
;	*s -> R16,R17
;PCODE: $00000272 VOL: 0
;PCODE: $00000273 VOL: 0
;PCODE: $00000274 VOL: 0
;PCODE: $00000275 VOL: 0
;PCODE: $00000276 VOL: 0
; 0000 015C     *s++ = '-';
;PCODE: $00000277 VOL: 0
;PCODE: $00000278 VOL: 0
;PCODE: $00000279 VOL: 0
;PCODE: $0000027A VOL: 0
;PCODE: $0000027B VOL: 0
; 0000 015D   } else {
;PCODE: $0000027C VOL: 0
;PCODE: $0000027D VOL: 0
; 0000 015E     i = -i;
;PCODE: $0000027E VOL: 0
;PCODE: $0000027F VOL: 0
;PCODE: $00000280 VOL: 0
; 0000 015F   }
;PCODE: $00000281 VOL: 0
; 0000 0160   *itoa_simple_helper(s, i) = '\0';
;PCODE: $00000282 VOL: 0
;PCODE: $00000283 VOL: 0
;PCODE: $00000284 VOL: 0
;PCODE: $00000285 VOL: 0
;PCODE: $00000286 VOL: 0
; 0000 0161   return dest;
;PCODE: $00000287 VOL: 0
;PCODE: $00000288 VOL: 0
;PCODE: $00000289 VOL: 0
;PCODE: $0000028A VOL: 0
;PCODE: $0000028B VOL: 0
;PCODE: $0000028C VOL: 0
;PCODE: $0000028D VOL: 0
; 0000 0162 }
;PCODE: $0000028E VOL: 0
;
;unsigned char keypad_scan()
; 0000 0165 {
;PCODE: $0000028F VOL: 0
;PCODE: $00000290 VOL: 0
; 0000 0166 unsigned char result=255;
; 0000 0167 ////////////////////////  ROW1 ////////////////////////
; 0000 0168 KEYPAD_R1 = 1; KEYPAD_R2 = 0;  KEYPAD_R3 = 0;  KEYPAD_R4 = 0; //set Row1 for Keypad
;PCODE: $00000291 VOL: 0
;	result -> R17
;PCODE: $00000292 VOL: 0
;PCODE: $00000293 VOL: 0
;PCODE: $00000294 VOL: 0
;PCODE: $00000295 VOL: 0
;PCODE: $00000296 VOL: 0
;PCODE: $00000297 VOL: 0
;PCODE: $00000298 VOL: 0
;PCODE: $00000299 VOL: 0
;PCODE: $0000029A VOL: 0
;PCODE: $0000029B VOL: 0
; 0000 0169 delay_ms(5);
;PCODE: $0000029C VOL: 0
;PCODE: $0000029D VOL: 0
;PCODE: $0000029E VOL: 0
; 0000 016A if (KEYPAD_C1)
;PCODE: $0000029F VOL: 0
;PCODE: $000002A0 VOL: 0
;PCODE: $000002A1 VOL: 0
; 0000 016B result = KEYPAD_NUM7;
;PCODE: $000002A2 VOL: 0
;PCODE: $000002A3 VOL: 0
; 0000 016C else if (KEYPAD_C2)
;PCODE: $000002A4 VOL: 0
;PCODE: $000002A5 VOL: 0
;PCODE: $000002A6 VOL: 0
;PCODE: $000002A7 VOL: 0
;PCODE: $000002A8 VOL: 0
; 0000 016D result = KEYPAD_NUM8;
;PCODE: $000002A9 VOL: 0
;PCODE: $000002AA VOL: 0
; 0000 016E else if (KEYPAD_C3)
;PCODE: $000002AB VOL: 0
;PCODE: $000002AC VOL: 0
;PCODE: $000002AD VOL: 0
;PCODE: $000002AE VOL: 0
;PCODE: $000002AF VOL: 0
; 0000 016F result = KEYPAD_NUM9;
;PCODE: $000002B0 VOL: 0
;PCODE: $000002B1 VOL: 0
; 0000 0170 else if (KEYPAD_C4)
;PCODE: $000002B2 VOL: 0
;PCODE: $000002B3 VOL: 0
;PCODE: $000002B4 VOL: 0
;PCODE: $000002B5 VOL: 0
;PCODE: $000002B6 VOL: 0
; 0000 0171 result = KEYPAD_DIV;
;PCODE: $000002B7 VOL: 0
;PCODE: $000002B8 VOL: 0
; 0000 0172 
; 0000 0173 ////////////////////////  ROW2 ////////////////////////
; 0000 0174 KEYPAD_R1 = 0; KEYPAD_R2 = 1;  KEYPAD_R3 = 0;  KEYPAD_R4 = 0; //set Row2 for Keypad
;PCODE: $000002B9 VOL: 0
;PCODE: $000002BA VOL: 0
;PCODE: $000002BB VOL: 0
;PCODE: $000002BC VOL: 0
;PCODE: $000002BD VOL: 0
;PCODE: $000002BE VOL: 0
;PCODE: $000002BF VOL: 0
;PCODE: $000002C0 VOL: 0
;PCODE: $000002C1 VOL: 0
;PCODE: $000002C2 VOL: 0
;PCODE: $000002C3 VOL: 0
;PCODE: $000002C4 VOL: 0
; 0000 0175 delay_ms(5);
;PCODE: $000002C5 VOL: 0
;PCODE: $000002C6 VOL: 0
;PCODE: $000002C7 VOL: 0
; 0000 0176 if (KEYPAD_C1)
;PCODE: $000002C8 VOL: 0
;PCODE: $000002C9 VOL: 0
;PCODE: $000002CA VOL: 0
; 0000 0177 result = KEYPAD_NUM4;
;PCODE: $000002CB VOL: 0
;PCODE: $000002CC VOL: 0
; 0000 0178 else if (KEYPAD_C2)
;PCODE: $000002CD VOL: 0
;PCODE: $000002CE VOL: 0
;PCODE: $000002CF VOL: 0
;PCODE: $000002D0 VOL: 0
;PCODE: $000002D1 VOL: 0
; 0000 0179 result = KEYPAD_NUM5;
;PCODE: $000002D2 VOL: 0
;PCODE: $000002D3 VOL: 0
; 0000 017A else if (KEYPAD_C3)
;PCODE: $000002D4 VOL: 0
;PCODE: $000002D5 VOL: 0
;PCODE: $000002D6 VOL: 0
;PCODE: $000002D7 VOL: 0
;PCODE: $000002D8 VOL: 0
; 0000 017B result = KEYPAD_NUM6;
;PCODE: $000002D9 VOL: 0
;PCODE: $000002DA VOL: 0
; 0000 017C else if (KEYPAD_C4)
;PCODE: $000002DB VOL: 0
;PCODE: $000002DC VOL: 0
;PCODE: $000002DD VOL: 0
;PCODE: $000002DE VOL: 0
;PCODE: $000002DF VOL: 0
; 0000 017D result = KEYPAD_MUL;
;PCODE: $000002E0 VOL: 0
;PCODE: $000002E1 VOL: 0
; 0000 017E 
; 0000 017F ////////////////////////  ROW3 ////////////////////////
; 0000 0180 KEYPAD_R1 = 0; KEYPAD_R2 = 0;  KEYPAD_R3 = 1;  KEYPAD_R4 = 0; //set Row3 for Keypad
;PCODE: $000002E2 VOL: 0
;PCODE: $000002E3 VOL: 0
;PCODE: $000002E4 VOL: 0
;PCODE: $000002E5 VOL: 0
;PCODE: $000002E6 VOL: 0
;PCODE: $000002E7 VOL: 0
;PCODE: $000002E8 VOL: 0
;PCODE: $000002E9 VOL: 0
;PCODE: $000002EA VOL: 0
;PCODE: $000002EB VOL: 0
;PCODE: $000002EC VOL: 0
;PCODE: $000002ED VOL: 0
; 0000 0181 delay_ms(5);
;PCODE: $000002EE VOL: 0
;PCODE: $000002EF VOL: 0
;PCODE: $000002F0 VOL: 0
; 0000 0182 if (KEYPAD_C1)
;PCODE: $000002F1 VOL: 0
;PCODE: $000002F2 VOL: 0
;PCODE: $000002F3 VOL: 0
; 0000 0183 result = KEYPAD_NUM1;
;PCODE: $000002F4 VOL: 0
;PCODE: $000002F5 VOL: 0
; 0000 0184 else if (KEYPAD_C2)
;PCODE: $000002F6 VOL: 0
;PCODE: $000002F7 VOL: 0
;PCODE: $000002F8 VOL: 0
;PCODE: $000002F9 VOL: 0
;PCODE: $000002FA VOL: 0
; 0000 0185 result = KEYPAD_NUM2;
;PCODE: $000002FB VOL: 0
;PCODE: $000002FC VOL: 0
; 0000 0186 else if (KEYPAD_C3)
;PCODE: $000002FD VOL: 0
;PCODE: $000002FE VOL: 0
;PCODE: $000002FF VOL: 0
;PCODE: $00000300 VOL: 0
;PCODE: $00000301 VOL: 0
; 0000 0187 result = KEYPAD_NUM3;
;PCODE: $00000302 VOL: 0
;PCODE: $00000303 VOL: 0
; 0000 0188 else if (KEYPAD_C4)
;PCODE: $00000304 VOL: 0
;PCODE: $00000305 VOL: 0
;PCODE: $00000306 VOL: 0
;PCODE: $00000307 VOL: 0
;PCODE: $00000308 VOL: 0
; 0000 0189 result = KEYPAD_MNS;
;PCODE: $00000309 VOL: 0
;PCODE: $0000030A VOL: 0
; 0000 018A 
; 0000 018B ////////////////////////  ROW4 ////////////////////////
; 0000 018C KEYPAD_R1 = 0; KEYPAD_R2 = 0;  KEYPAD_R3 = 0;  KEYPAD_R4 = 1; //set Row4 for Keypad
;PCODE: $0000030B VOL: 0
;PCODE: $0000030C VOL: 0
;PCODE: $0000030D VOL: 0
;PCODE: $0000030E VOL: 0
;PCODE: $0000030F VOL: 0
;PCODE: $00000310 VOL: 0
;PCODE: $00000311 VOL: 0
;PCODE: $00000312 VOL: 0
;PCODE: $00000313 VOL: 0
;PCODE: $00000314 VOL: 0
;PCODE: $00000315 VOL: 0
;PCODE: $00000316 VOL: 0
; 0000 018D delay_ms(5);
;PCODE: $00000317 VOL: 0
;PCODE: $00000318 VOL: 0
;PCODE: $00000319 VOL: 0
; 0000 018E if (KEYPAD_C1)
;PCODE: $0000031A VOL: 0
;PCODE: $0000031B VOL: 0
;PCODE: $0000031C VOL: 0
; 0000 018F result = KEYPAD_ON;
;PCODE: $0000031D VOL: 0
;PCODE: $0000031E VOL: 0
; 0000 0190 else if (KEYPAD_C2)
;PCODE: $0000031F VOL: 0
;PCODE: $00000320 VOL: 0
;PCODE: $00000321 VOL: 0
;PCODE: $00000322 VOL: 0
;PCODE: $00000323 VOL: 0
; 0000 0191 result = KEYPAD_NUM0;
;PCODE: $00000324 VOL: 0
;PCODE: $00000325 VOL: 0
; 0000 0192 else if (KEYPAD_C3)
;PCODE: $00000326 VOL: 0
;PCODE: $00000327 VOL: 0
;PCODE: $00000328 VOL: 0
;PCODE: $00000329 VOL: 0
;PCODE: $0000032A VOL: 0
; 0000 0193 result = KEYPAD_EQU;
;PCODE: $0000032B VOL: 0
;PCODE: $0000032C VOL: 0
; 0000 0194 else if (KEYPAD_C4)
;PCODE: $0000032D VOL: 0
;PCODE: $0000032E VOL: 0
;PCODE: $0000032F VOL: 0
;PCODE: $00000330 VOL: 0
;PCODE: $00000331 VOL: 0
; 0000 0195 result = KEYPAD_PLS;
;PCODE: $00000332 VOL: 0
;PCODE: $00000333 VOL: 0
; 0000 0196 
; 0000 0197 return result;
;PCODE: $00000334 VOL: 0
;PCODE: $00000335 VOL: 0
;PCODE: $00000336 VOL: 0
;PCODE: $00000337 VOL: 0
;PCODE: $00000338 VOL: 0
;PCODE: $00000339 VOL: 0
;PCODE: $0000033A VOL: 0
; 0000 0198 }
;PCODE: $0000033B VOL: 0
