;/*******************************************************
;This program was created by the
;CodeWizardAVR V3.12 Advanced
;Automatic Program Generator
;© Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project : HW5
;Version : 1.0
;Date    : 4/7/2024
;Author  : Pooria Rahimi
;Company : IUST
;Comments:
;Nothing
;
;
;Chip type               : ATmega32
;Program type            : Application
;AVR Core Clock frequency: 8.000000 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 512
;*******************************************************/
;
;#include <mega32.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x80
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x70
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x60
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x70
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <delay.h>
;
;const unsigned char Code[]=
;{
;    0xFF,    //    0001        # # # # # # # #
;    0xFF,    //    0002        # # # # # # # #
;    0xFF,    //    0003        # # # # # # # #
;    0xFF,    //    0004        # # # # # # # #
;    0xFF,    //    0005        # # # # # # # #
;    0xFF,    //    0006        # # # # # # # #
;    0xFF,    //    0007        # # # # # # # #
;    0xFF,    //    0008        # # # # # # # #
;    0xFF,    //    0009        # # # # # # # #
;    0xFF,    //    000A        # # # # # # # #
;    0xFF,    //    000B        # # # # # # # #
;    0xFF,    //    000C        # # # # # # # #
;    0xFF,    //    000D        # # # # # # # #
;    0xFF,    //    000E        # # # # # # # #
;    0xFF,    //    000F        # # # # # # # #
;    0xFF,    //    0010        # # # # # # # #
;    0x1F,    //    0011        . . . # # # # #
;    0xC3,    //    0012        # # . . . . # #
;    0xDC,    //    0013        # # . # # # . .
;    0xDC,    //    0014        # # . # # # . .
;    0xC3,    //    0015        # # . . . . # #
;    0x1F,    //    0016        . . . # # # # #
;    0xFF,    //    0017        # # # # # # # #
;    0x00,    //    0018        . . . . . . . .
;    0x76,    //    0019        . # # # . # # .
;    0x76,    //    001A        . # # # . # # .
;    0x76,    //    001B        . # # # . # # .
;    0x89,    //    001C        # . . . # . . #
;    0xFF,    //    001D        # # # # # # # #
;    0xC3,    //    001E        # # . . . . # #
;    0xBD,    //    001F        # . # # # # . #
;    0x7E,    //    0020        . # # # # # # .
;    0x7E,    //    0021        . # # # # # # .
;    0x7E,    //    0022        . # # # # # # .
;    0x7E,    //    0023        . # # # # # # .
;    0xFF,    //    0024        # # # # # # # #
;    0x00,    //    0025        . . . . . . . .
;    0x7E,    //    0026        . # # # # # # .
;    0x7E,    //    0027        . # # # # # # .
;    0x7E,    //    0028        . # # # # # # .
;    0xBD,    //    0029        # . # # # # . #
;    0xC3,    //    002A        # # . . . . # #
;    0xFF,    //    002B        # # # # # # # #
;    0x00,    //    002C        . . . . . . . .
;    0x76,    //    002D        . # # # . # # .
;    0x76,    //    002E        . # # # . # # .
;    0x76,    //    002F        . # # # . # # .
;    0x7E,    //    0030        . # # # # # # .
;    0xFF,    //    0031        # # # # # # # #
;    0x00,    //    0032        . . . . . . . .
;    0xF6,    //    0033        # # # # . # # .
;    0xF6,    //    0034        # # # # . # # .
;    0xF6,    //    0035        # # # # . # # .
;    0xF6,    //    0036        # # # # . # # .
;    0xFF,    //    0037        # # # # # # # #
;    0xFF,    //    0038        # # # # # # # #
;    0xFF,    //    0039        # # # # # # # #
;    0xFF,    //    003A        # # # # # # # #
;    0xFF,    //    003B        # # # # # # # #
;    0xFF,    //    003C        # # # # # # # #
;    0xFF,    //    003D        # # # # # # # #
;    0xFF,    //    003E        # # # # # # # #
;    0xFF,    //    003F        # # # # # # # #
;    0xFF     //    0040        # # # # # # # #
;};
;void main(void)
; 0000 0060 {

	.CSEG
;PCODE: $0000000D VOL: 0
; 0000 0061 unsigned char Row,Scan,Refresh,Index,S;
; 0000 0062 
; 0000 0063 DDRC=0xFF;
;	Row -> R17
;	Scan -> R16
;	Refresh -> R19
;	Index -> R18
;	S -> R21
;PCODE: $0000000E VOL: 0
;PCODE: $0000000F VOL: 0
; 0000 0064 DDRD=0xFF;
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
; 0000 0065 DDRB=0xFF;
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
; 0000 0066 
; 0000 0067 while (1)
;PCODE: $00000014 VOL: 0
; 0000 0068     {
; 0000 0069       // Place your code here
; 0000 006A       for (S=0; S<56; S++)
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
; 0000 006B       {
; 0000 006C         for (Refresh=1; Refresh<11; Refresh++)
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
; 0000 006D         {
; 0000 006E           Scan = 0b00000001;
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
; 0000 006F           for (Row=0; Row<8; Row++)
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
; 0000 0070           {
; 0000 0071 
; 0000 0072                 Index = (56- S) + Row;
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
; 0000 0073                 PORTD = Scan;
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
; 0000 0074                 PORTB = 0x00;
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
; 0000 0075                 PORTC = Code[Index];
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
; 0000 0076                 delay_ms(2);
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
; 0000 0077                 PORTB = Scan;
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
; 0000 0078                 PORTD = 0x00;
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
; 0000 0079                 PORTC = Code[(Index + 8)%64];
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
; 0000 007A                 delay_ms(2);
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
; 0000 007B 
; 0000 007C                 Scan = Scan << 1;
;PCODE: $00000051 VOL: 0
; 0000 007D           }
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
; 0000 007E         }
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
; 0000 007F       }
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
; 0000 0080     }
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
; 0000 0081 }
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
